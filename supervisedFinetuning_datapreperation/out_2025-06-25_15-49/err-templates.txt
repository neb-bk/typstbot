```json
[
  {
    "instruction": "What is the primary purpose of templates in Typst, and how do they address the scoping limitations of `set` and `show` rules? Provide a basic example demonstrating their definition and the problem they solve.",
    "answer": "Templates in Typst are functions designed to apply consistent styling and settings across multiple documents or sections of a document. They primarily address the limitation that `set` and `show` rules are only active within their current scope. When you import a file containing only `set` or `show` rules, those rules typically won't affect content in the importing file.\n\nTemplates circumvent this by encapsulating the styling rules within a function that takes the document's content (`body`) as an argument. When this function is applied, the rules become active for the `body` content, regardless of where the template file was imported.\n\nHere's a basic example:\n\n`template.typ`:\ntyp```\n// define a function that: (scripting mode)
// - takes content
// - applies styling to it
// - returns the styled content
#let apply-my-style(body) = {
  show heading.where(level: 1): text(red, 1.5em, weight: \"bold\")
  set text(font: \"New Computer Modern\", size: 12pt)
  set page(margin: (top: 2cm, bottom: 2cm, left: 2.5cm, right: 2.5cm))
  body // The content of the document is processed within this styled context
}\n```\n\n`main.typ`:\ntyp```\n#import \"template.typ\": apply-my-style\n#show: apply-my-style\n\n#set document(title: \"My Styled Document\")\n\n= Introduction\n\nThis is the content of my document, which will now have the styles defined in `apply-my-style` applied to it. This includes the custom heading style, text font, and page margins.\n\n== Section 1\n\nSome more text here.\n```\n\nWithout `apply-my-style`, if you just had `set text(...)` in `template.typ` and imported it, the setting wouldn't affect `main.typ`'s content. By wrapping the settings in `apply-my-style` and applying it with `#show: apply-my-style`, the settings are applied to the entire document's content."
  },
  {
    "instruction": "Explain the difference between defining a template function using markup mode (`[...]`) versus scripting mode (`{...}`). When would you typically prefer one over the other for template creation?",
    "answer": "In Typst, template functions can be defined using either markup mode (`[...]`) or scripting mode (`{...}`). The core difference lies in how content and expressions are handled within the function body:\n\n*   **Markup Mode (`[...]`):** Within `[...]`, you are primarily in markup mode, meaning you can directly write Typst content, and expressions need to be explicitly escaped with a hash symbol (`#`). For example, to call a function or use a variable, you'd write `#my-function()` or `#my-variable`.\n\n    Example:\ntyp```\n#let template-markup(body) = [\n  #show heading.where(level: 1): emph\n  #set heading(numbering: \"1.1\")\n  // ... more markup and explicit # for scripting\n  #body\n]\n```\n\n*   **Scripting Mode (`{...}`):** Within `{...}`, you are primarily in scripting mode. This means you can directly write Typst expressions, function calls, and variable usages without needing the leading hash symbol (`#`). To include raw content, you would use content blocks (`[]`) or string literals.\n\n    Example:\ntyp```\n#let template-scripting(body) = {\n  show heading.where(level: 1): emph // No # needed for show/set\n  set heading(numbering: \"1.1\")\n  // ... more scripting\n  body // No # needed for body\n}\n```\n\n**When to prefer one over the other:**\n\n*   **Prefer Scripting Mode (`{...}`):** For template creation, **scripting mode (`{...}`) is generally preferred** and more idiomatic. This is because templates often involve a series of `set` and `show` rules, and potentially other logic (like conditionals or loops), all of which are expressions. Scripting mode allows for a cleaner, more concise definition without needing to constantly prefix expressions with `#`. It reduces the \"hash noise\" and makes the code more readable for complex template logic.\n\n*   **Markup Mode (`[...]`)** might be used if your template primarily consists of fixed content blocks with very few dynamic parts or scripting elements, though this is less common for general-purpose templates."
  },
  {
    "instruction": "How can you define a Typst template function to accept optional named arguments, and how would you incorporate these arguments into the template's styling or content generation? Provide a code example for a template that includes a custom document title.",
    "answer": "You can define a Typst template function to accept optional named arguments by listing them in the function signature with a default value, similar to how functions are defined in many programming languages. These arguments can then be used within the template's body to customize styling, add dynamic content, or control behavior.\n\nHere's how to define a template with an optional `document-title` argument and incorporate it into the template:\n\n`my-template.typ`:\ntyp```\n#let custom-document-template(body, document-title: none, page-fill: luma(250)) = {\n  // Set global document margins\n  set page(margin: (left: 2cm, right: 2cm, top: 2.5cm, bottom: 2.5cm))\n\n  // Set base font for the document\n  set text(font: \"IBM Plex Sans\", size: 11pt)\n\n  // Apply a background color to all pages, default is light gray\n  set page(fill: page-fill)\n\n  // Show the custom document title centered at the top if provided\n  if document-title != none {\n    align(center, text(document-title, size: 2em, weight: \"bold\", fill: blue))\n    v(1em) // Add some vertical space after the title\n  }\n\n  body // Render the actual document content\n}\n```\n\nIn this example:\n- `document-title: none` defines an optional named argument `document-title` with a default value of `none`.\n- `page-fill: luma(250)` defines another optional named argument for the page background color.\n- An `if` condition checks if `document-title` is provided (i.e., not `none`).\n- If a title is provided, it's displayed centered, bolded, and in a larger blue font at the top of the document.\n\nThis allows you to customize the template's behavior without modifying its core definition. If you don't provide a `document-title` when applying the template, no title will be shown."
  },
  {
    "instruction": "You have a Typst template `my-template.typ` that accepts an optional `name` argument. Demonstrate two different ways to apply this template to your main document, passing a specific value for the `name` argument in each method.",
    "answer": "Let's assume you have the following `my-template.typ`:\ntyp```\n#let apply-report-template(body, name: \"My Document\") = {\n  set text(font: \"Linux Libertine\", size: 12pt)\n  set heading(numbering: \"1.\")\n  set page(footer: [\n    #align(right, [#text(8pt, name) #h(1fr) #counter(page).display()])\n  ])\n\n  align(center, text(name, size: 2em, weight: \"bold\"))\n  v(1em)\n\n  body\n}\n```\n\nHere are two ways to apply this template in your `main.typ` file, passing a custom `name`:\n\n**Method 1: Using `func.with()` (Recommended for conciseness)**\n\nThe `func.with()` method is concise and directly applies the arguments to the function, returning a new function with those defaults pre-applied. This new function can then be directly used with `#show:`.\n\n`main.typ`:\ntyp```\n#import \"my-template.typ\": apply-report-template\n\n// Apply the template with a specific name using .with()\n#show: apply-report-template.with(name: \"Financial Report 2023\")\n\n= Introduction\n\nThis document presents the financial report for the year 2023, prepared using a custom Typst template.\n\n== Overview\n\nDetailed figures and analysis follow.\n```\n\n**Method 2: Defining a new wrapper function (Explicit)**\n\nThis method involves defining a new `let` binding that calls your original template function with the desired arguments. This new function then becomes the one applied with `#show:`.\n\n`main.typ`:\ntyp```\n#import \"my-template.typ\": apply-report-template\n\n// Define a new function that wraps apply-report-template with the desired argument\n#let customized-report(..args) = apply-report-template(name: \"Project Proposal\", ..args)\n\n// Apply the newly defined wrapper function\n#show: customized-report\n\n= Project Summary\n\nThis proposal outlines the key aspects of our new project initiative, structured by the custom template.\n\n== Milestones\n\nKey milestones for the project are detailed below.\n```\n\nBoth methods achieve the same result of applying the `apply-report-template` with a specified `name`, but `func.with()` is generally preferred for its brevity when you simply want to pre-configure a function's arguments before applying it globally."
  },
  {
    "instruction": "Design a Typst template named `academic-paper-template` for an academic paper. This template should:\n1.  Take `title` and `authors` (a content block for multiple authors) as arguments.\n2.  Set the document's margins to 3cm on all sides.\n3.  Set the base font to \"Latin Modern Roman\" with a size of 11pt.\n4.  Display the `title` centered and in a larger, bold font at the top.\n5.  Display the `authors` centered below the title.\n6.  Set numbering for level 1 headings as \"1.\", level 2 as \"1.1.\", and level 3 as \"1.1.1.\".\n7.  Include an example of how to use this template in a main document with actual title and author information.",
    "answer": "Here's the definition of the `academic-paper-template` and its usage:\n\n`academic-paper.typ`:\ntyp```\n#let academic-paper-template(body, title: \"Untitled Paper\", authors: []) = {\n  // 1. Set document margins\n  set page(margin: 3cm)\n\n  // 2. Set base font\n  set text(font: \"Latin Modern Roman\", size: 11pt)\n\n  // 3. Display title\n  align(center, text(title, 2em, weight: \"bold\"))\n  v(1em) // Vertical space after title\n\n  // 4. Display authors\n  if authors.len() > 0 {\n    align(center, authors)\n    v(2em) // More vertical space after authors\n  }\n\n  // 5. Set heading numbering\n  set heading(numbering: \"1.\", \"1.1.\", \"1.1.1.\")\n\n  body // The main content of the paper\n}\n```\n\n`main-paper.typ`:\ntyp```\n#import \"academic-paper.typ\": academic-paper-template\n\n#show: academic-paper-template.with(\n  title: \"A Novel Approach to Typst Template Design\",\n  authors: [\n    John Doe #h(1em) ^[University of Typst]\n    #parbreak()\n    Jane Smith #h(1em) ^[Typst Research Institute]\n  ]\n)\n\n= Introduction\n\nThis paper introduces a groundbreaking methodology for crafting highly modular and reusable templates within the Typst typesetting system. We explore various techniques including argument passing, scope management, and dynamic content generation.\n\n== Background\n\nTraditional typesetting often struggles with consistency across large documents or collaborative projects. Typst's unique approach to content and styling offers a powerful solution.\n\n=== Prior Work\n\nPrevious efforts in template design for markup languages have primarily focused on static definitions.\n\n= Methodology\n\nOur approach leverages Typst's scripting capabilities to create dynamic templates that adapt to content and user-defined parameters.\n```"
  },
  {
    "instruction": "You are creating a series of short technical notes. Create a Typst template named `technical-note` that automatically adds a fixed header \"Technical Note\" on the top left and the current date (formatted as Month Day, Year) on the top right of every page. The main body of the note should start on a new page after the header is set up. Show how to use this template.",
    "answer": "Here's the `technical-note` template that includes a fixed header and the current date on every page:\n\n`note-template.typ`:\ntyp```\n#let technical-note(body) = {\n  // Get the current date\n  let today = datetime.today()\n  let formatted-date = today.display(\"[month name] [day], [year]\")\n\n  // Set the page header\n  set page(header: [\n    #text(10pt, weight: \"bold\", \"Technical Note\") #h(1fr) #text(10pt, formatted-date)\n  ])\n\n  // Apply default page margins and text settings\n  set page(margin: (top: 2.5cm, bottom: 2cm, left: 2.5cm, right: 2.5cm))\n  set text(font: \"DejaVu Sans Mono\", size: 10pt)\n\n  body // Render the main content of the note\n}\n```\n\n`my-technical-document.typ`:\ntyp```\n#import \"note-template.typ\": technical-note\n\n#show: technical-note\n\n#set document(title: \"Typst Functionality\")\n\n= Overview of Typst\n\nTypst is a modern typesetting system that aims to be as powerful as LaTeX, but easier to learn and use. It features a custom markup language and a built-in scripting language.\n\n== Key Features\n\nTypst offers several compelling features:\n\n*   **Simplicity**: Intuitive syntax makes it easy to get started.\n*   **Performance**: Fast compilation times.\n*   **Scriptability**: Powerful scripting language for custom logic.\n*   **Modularity**: Supports templates and module imports for reuse.\n\n= Scripting in Typst\n\nTypst's scripting capabilities allow for dynamic content generation, complex layouts, and custom function definitions. This is particularly useful for automating document generation or creating intricate graphical elements.\n\nThis note continues on the next page, demonstrating the consistent header and date.\n```\n\nIn this example:\n- `datetime.today()` is used to get the current date.\n- `today.display(\"[month name] [day], [year]\")` formats the date into a human-readable string.\n- `set page(header: [...])` defines the content for the header of every page. `h(1fr)` pushes the date to the right.\n- The `body` is then rendered, and because `set page` and `set text` are within the `technical-note` function, they apply to all content passed into it."
  },
  {
    "instruction": "Where can users find additional resources, such as the official tutorial for writing templates or community-contributed template repositories, for Typst?",
    "answer": "Typst users can find additional resources for writing templates and discover community-contributed ones in the following places:\n\n1.  **Official Tutorial**: The Typst team provides a dedicated tutorial on making templates, which offers more in-depth guidance and examples beyond what's typically found in the main documentation. You can find it at: [https://typst.app/docs/tutorial/making-a-template/](https://typst.app/docs/tutorial/making-a-template/)\n\n2.  **Awesome Typst**: For community-contributed templates and other Typst-related projects, a great resource is the `awesome-typst` GitHub repository. While there isn't an *official* repository specifically for templates maintained by the Typst project itself, `awesome-typst` serves as a curated list of high-quality community projects, including many templates. You can explore it here: [https://github.com/qjcg/awesome-typst](https://github.com/qjcg/awesome-typst)\n\nThese resources are excellent starting points for learning more about template development and finding inspiration or ready-to-use templates for various purposes."
  },
  {
    "instruction": "Create a `draft-mode-template` that takes a `body` and an optional boolean argument `is-draft` (defaulting to `false`). If `is-draft` is `true`, the template should add a semi-transparent 'DRAFT' watermark to every page. Otherwise, it should apply no watermark. Demonstrate its usage for both draft and final modes.",
    "answer": "Here's the `draft-mode-template` that conditionally applies a watermark:\n\n`draft-template.typ`:\ntyp```\n#let draft-mode-template(body, is-draft: false) = {\n  set page(margin: 2.5cm)\n  set text(font: \"IBM Plex Sans\", size: 11pt)\n\n  // Apply watermark if in draft mode\n  if is-draft {\n    set page(foreground: {\n      // Create a rotated, semi-transparent \"DRAFT\" text\n      box(\n        width: 100%,\n        height: 100%,\n        align(center + middle, rotate(z: -30deg, text(10em, luma(0, 50%), \"DRAFT\")))\n      )\n    })\n  }\n\n  body // Render the main content\n}\n```\n\n**Usage in Draft Mode (`main-draft.typ`):**\ntyp```\n#import \"draft-template.typ\": draft-mode-template\n\n#show: draft-mode-template.with(is-draft: true)\n\n#set document(title: \"My Research Paper\")\n\n= Introduction\n\nThis is a draft version of the research paper. Please review for any errors or suggestions. The 'DRAFT' watermark should be visible on every page.\n\n== Experimental Setup\n\nThe experiments were conducted using custom-built equipment as described below.\n```\n\n**Usage in Final Mode (`main-final.typ`):**\ntyp```\n#import \"draft-template.typ\": draft-mode-template\n\n#show: draft-mode-template.with(is-draft: false)\n\n#set document(title: \"My Research Paper (Final)\")\n\n= Introduction\n\nThis is the final version of the research paper. The watermark should not be present in this output.\n\n== Conclusion\n\nAll findings have been validated and the paper is ready for submission.\n```\n\nIn this template:\n- `is-draft` is a boolean argument that defaults to `false`.\n- An `if is-draft` condition checks the value.\n- If `true`, `set page(foreground: ...)` is used to add content (the 'DRAFT' text) to the foreground layer of every page. The `luma(0, 50%)` creates a semi-transparent black color, and `rotate(z: -30deg, ...)` rotates the text for a typical watermark effect. `box(width: 100%, height: 100%, ...)` ensures the watermark fills the entire page area for centering."
  }
]
```