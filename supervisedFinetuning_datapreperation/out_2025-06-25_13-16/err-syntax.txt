```json
[
  {
    "instruction": "Explain the three main syntactical modes in Typst and how to switch between them, providing an example for each switch.",
    "answer": "Typst has three syntactical modes: Markup, Math, and Code.\n\n*   **Markup Mode:** This is the default mode for writing document content.\n*   **Math Mode:** Used for typesetting mathematical formulas. You enter it by surrounding an equation with `[$...$]` characters.\n*   **Code Mode:** Allows you to use Typst's scripting features. You enter it by prefixing a code expression with `#`.\n\nOnce you enter code mode with `#`, you generally stay in it until you explicitly switch back to markup or math mode. To switch back to markup mode from code or math, you surround the markup with `[[...]]`. To switch back to math mode, you use `[$...$]` as usual.\n\nHere are examples of switching between modes:\n\ntyp```\n#let result = 1 + 2\n[The result of the calculation is #(result).]\n// From markup to code\n\n[$-x^2 + y^2 = r^2$]\n// From markup to math\n\n#let name = [[*Typst*]]\n[Hello, #name!] \n// From code to markup and back to code (for variable insertion)\n\n#let expr = $a^2 + b^2$\n[The expression is: #expr.]\n// From code to math and back to code (for variable insertion)\n\n[Let's see an equation: [$x = #sqrt(4)$], where 4 is computed in code mode within math mode.]\n// Markup -> Math -> Code -> Math -> Markup\n```"
  },
  {
    "instruction": "How can I apply strong and emphasized text in Typst's markup mode? Provide an example that includes both.",
    "answer": "In Typst's markup mode, you can apply strong emphasis using asterisks `*` and general emphasis (often italic) using underscores `_`. Both pieces of syntax are shortcuts for the `strong()` and `emph()` functions, respectively.\n\nHere's an example:\n\ntyp```\nThis is some regular text. This part is [*strong*] and this part is [_emphasized_].\n\nFor a more complex example, consider this paragraph: [_This document provides a *comprehensive* guide to Typst's syntax, covering its various modes._]\n```"
  },
  {
    "instruction": "I need to display a piece of code or raw text without Typst interpreting its special characters. How can I do this in markup mode, and can I include a URL in it?",
    "answer": "To display raw text or code without Typst interpreting special characters, you use backticks `` ` ``. This is useful for code snippets, commands, or anything where you want the exact characters to appear. You cannot include an active URL link *inside* raw text using Typst's `[https://...]]` syntax because the raw text mode prevents interpretation. However, you can simply *type* a URL as part of the raw text.\n\nHere's an example:\n\ntyp```\nTo print a message in Typst, use `#print(\"Hello\")`. The command `[`typst compile main.typ`]` compiles your document.\n\nVisit the official Typst website at `https://typst.app/` for more information.\n```"
  },
  {
    "instruction": "Demonstrate how to create a basic heading, a bullet list, and a numbered list in Typst markup. Also, show how to add a label to the heading and reference it later.",
    "answer": "In Typst, headings are created with `=`, bullet lists with `-`, and numbered lists with `+`. Labels are added with `<label_name>` and referenced with `[@label_name]`.\n\ntyp```\n= Introduction <sec-intro>\n\nThis section introduces the basic syntax elements of Typst.\n\n- Item one\n- Item two\n  - Sub-item A\n  - Sub-item B\n\n+ First step\n+ Second step\n+ Third step\n\nAs discussed in @sec-intro, we can now proceed to more advanced topics.\n```"
  },
  {
    "instruction": "I want to create a definition list (term list) in Typst. How do I format it, and can I include multiple terms for a single description?",
    "answer": "You can create a term list (also known as a definition list) using the `/ Term: description` syntax. Each entry starts with `/`, followed by the term, a colon, and then its description. While the direct markup syntax doesn't allow multiple terms for a single description *on the same line*, you can structure it by repeating the description or using a code block for more complex layouts if needed, but for simple markup, it's one term per line.\n\nHere's an example:\n\ntyp```\n= Glossary\n\n/ Typst: A new markup-based typesetting system.\n/ Markup: A system for annotating a document in a way that is syntactically distinguishable from the text itself.\n/ LaTeX: A document preparation system that is widely used for scientific and technical documents.\n/ PDF: Portable Document Format, a file format used to present documents in a manner independent of application software, hardware, and operating systems.\n```\n\nIf you need to associate multiple terms with a single, shared description, you would typically list them individually, possibly with a slightly modified description or by leveraging Typst's scripting capabilities for more advanced layouts that group them visually."
  },
  {
    "instruction": "Explain how to insert inline mathematical expressions and block-level mathematical equations in Typst. Provide an example for both that uses exponents and fractions.",
    "answer": "Typst uses `[$...$]` to enter math mode. For inline math, you omit surrounding whitespace. For block-level math, you add at least one space before and after the content within the `[$]` characters, which centers the equation on its own line.\n\nHere are examples:\n\ntyp```\nThe famous equation $E = mc^2$ relates energy, mass, and the speed of light.\n\nFor a quadratic equation, we can use the quadratic formula:\n[$ x = (-b +- sqrt(b^2 - 4ac)) / (2a) $]\n\nAnd for simple fractions, we often write them inline like $1/2$ or as a block if they are part of a larger expression:\n[$ (a+b)/(c+d) + x^y $]\n```"
  },
  {
    "instruction": "How do I use attachments (subscripts and superscripts) and alignment points in Typst's math mode? Show an example combining them.",
    "answer": "In Typst's math mode, subscripts are created with `_` and superscripts with `^`. Alignment points, often used in multi-line equations, are specified with `&`.\n\nHere's an example demonstrating both:\n\ntyp```\nLet's consider a sequence $a_n$ and its limit. We can write:\n[$ sum_(i=1)^n i^2 = (n(n+1)(2n+1))/6 $]\n\nFor an aligned equation system:\n[$ \begin{aligned}\nx_1 &= 2y + z^2 \\ \n   &= 3y - w^3 \\ \n   &= 5 \n\end{aligned} $]\n```\nNote: The `\begin{aligned}` and `\end{aligned}` environment is a common way to achieve multi-line alignment in math systems, although Typst's documentation simply shows `x &= 2 \ &= 3`. For complex alignment, one would typically use an explicit math function for environments or `\n` (newline) and `&` for alignment within a single math block. The example uses a common pattern for multi-line alignment to be more illustrative."
  },
  {
    "instruction": "I need to include a variable from code mode or access a field within math mode. How is this done? Provide an example where a variable defined in code is used in a math expression.",
    "answer": "In Typst's math mode, you can access variables defined in code mode or fields of objects using the `#` prefix, just like in markup mode. This allows for dynamic generation of mathematical content.\n\nHere's an example where a variable `area` is calculated in code and then inserted into a math expression:\n\ntyp```\n#let radius = 5\n#let area = 2 * $pi$ * radius^2\n\nThe radius of the circle is $r = #radius$ units. The area of the circle is given by $A = #area$ square units, where $A = 2 pi r^2$.\n```"
  },
  {
    "instruction": "What are some of the basic data types available in Typst's code mode? Provide an example for each of the following: boolean, integer, floating-point number, length, angle, ratio, and string.",
    "answer": "Typst's code mode supports various fundamental data types. Here are examples for the requested types:\n\ntyp```\n#let is_active = true // Boolean\n#let item_count = 100 // Integer\n#let pi_value = 3.14159 // Floating-point number\n#let page_margin = 2cm // Length\n#let rotation_angle = 90deg // Angle\n#let column_ratio = 50% // Ratio\n#let greeting_message = \"Hello, Typst!\" // String\n\n// You can print them to see their values, though they won't render directly on the page without explicit content.\n// #print(is_active)\n// #print(item_count)\n// #print(page_margin)\n// #print(greeting_message)\n\n[Boolean: #(is_active)]\n[Integer: #(item_count)]\n[Float: #(pi_value)]\n[Length: #(page_margin)]\n[Angle: #(rotation_angle)]\n[Ratio: #(column_ratio)]\n[String: #(greeting_message)]\n```"
  },
  {
    "instruction": "How do I define a variable and use a content block in Typst's code mode? Show an example where a variable holds a content block and is then displayed.",
    "answer": "In Typst's code mode, you define variables using `let`. A content block is created by enclosing markup within square brackets `[...]`. You can assign a content block to a variable, which allows you to store and reuse formatted content.\n\nHere's an example:\n\ntyp```\n#let welcome_message = [Hello, [*Typst*] user! Welcome to our document.]\n\n#welcome_message\n\n// You can also combine content blocks dynamically:\n#let part1 = [This is the first part. ]\n#let part2 = [And this is the _second_ part.]\n\n#part1 + part2\n```"
  },
  {
    "instruction": "Explain how to create an array and a dictionary in Typst's code mode. Provide an example of each and show how to access elements.",
    "answer": "In Typst's code mode, arrays (sequences of values) are created using parentheses `(...)`, and dictionaries (key-value pairs) are created using curly braces `{key: value, ...}`.\n\nHere's an example:\n\ntyp```\n#let colors = (\"red\", \"green\", \"blue\") // Array\n#let first_color = colors.at(0) // Accessing by index (0-based)\n#let second_color = colors.at(1)\n\n#let person = (name: \"Alice\", age: 30, city: \"New York\") // Dictionary\n#let person_name = person.name // Accessing by field access\n#let person_age = person.at(\"age\") // Accessing by key (alternative for string keys)\n\n[Array Example:]\n[Colors: #(colors.at(0)), #(colors.at(1)), #(colors.at(2))]\n[First color: #(first_color)]\n\n[Dictionary Example:]\n[Person's Name: #(person_name)]\n[Person's Age: #(person_age)]\n```"
  },
  {
    "instruction": "How do you define a custom named function and call it in Typst's code mode? Show an example of a function that takes arguments and returns a value.",
    "answer": "You can define a named function in Typst's code mode using the `let` keyword, followed by the function name, its parameters in parentheses, and its body. Functions can take arguments and return values (implicitly, the last expression in the body is returned).\n\nHere's an example of a function that calculates the area of a rectangle:\n\ntyp```\n#let calculate_rectangle_area(width, height) = {\n  width * height\n}\n\n#let w = 10pt\n#let h = 5pt\n#let area = calculate_rectangle_area(w, h)\n\n[The area of a rectangle with width #(w) and height #(h) is #(area).]\n\n// Another call with different values\n[The area of a 7cm by 3cm rectangle is #(calculate_rectangle_area(7cm, 3cm)).]\n```"
  },
  {
    "instruction": "Demonstrate the use of `if-else` conditionals and `for` loops in Typst's code mode. Provide an example where you iterate through an array and use an `if` statement to check a condition.",
    "answer": "Typst's code mode supports standard control flow structures like `if-else` for conditional execution and `for` loops for iteration.\n\nHere's an example that iterates through a list of numbers, checks if each is even or odd, and displays a message:\n\ntyp```\n#let numbers = (1, 2, 3, 4, 5, 6)\n\n= Number Analysis\n\n#for num in numbers {\n  if num % 2 == 0 {\n    [The number #num is even.]\n  } else {\n    [The number #num is odd.]\n  }\n}\n\n// Example of a standalone if-else\n#let x = 10\n#if x > 5 {\n  [X is greater than 5.]\n} else {\n  [X is not greater than 5.]\n}\n```"
  },
  {
    "instruction": "How do you add comments in Typst? Show examples of both single-line and multi-line comments in a Typst document.",
    "answer": "Typst supports two types of comments: single-line comments and multi-line (block) comments. Comments are ignored during compilation and are useful for explanations or temporarily disabling parts of the code/markup.\n\n*   **Single-line comments:** Start with `//` and comment out the rest of the line.\n*   **Multi-line comments:** Enclosed between `/*` and `*/`, and can span multiple lines.\n\nHere's an example demonstrating both:\n\ntyp```\n// This is a single-line comment in markup mode.\n= Document Title\n\nThis is the main content of the document.\n\n/*\nThis is a multi-line comment.\nIt can span several lines\nand will be completely ignored by Typst.\n*/\n\n#let x = 10 // Define a variable x\n#let y = 20 /* Define another variable y\n            for a specific purpose */\n\n[The sum of x and y is #(x + y).]\n```"
  },
  {
    "instruction": "Explain the concept of escape sequences in Typst and provide examples of how to escape special characters and insert a Unicode emoji.",
    "answer": "Escape sequences in Typst are used to insert characters that have special meaning in Typst's syntax or are difficult to type directly. You precede the character with a backslash `\\` to 'escape' its special meaning. For arbitrary Unicode characters, you can use the hexadecimal escape sequence `\\u{XXXX}`.\n\nHere are examples:\n\ntyp```\nI want to display a literal asterisk, so I write \\* instead of *.\nThis document mentions square brackets like \\[bracketed text\\].\n\nFor a price, I need to show a dollar sign: \\$10.50.\n\nLet's add a smiling face emoji: \\u{1f600} and a thumbs up: \\u{1f44d}.\n```"
  },
  {
    "instruction": "How do relative and absolute paths work in Typst for referencing external resources like images? Provide an example for each using an image.",
    "answer": "Typst uses paths as strings to reference external resources such as images, other Typst files, or data files. There are two types of paths:\n\n*   **Relative Path:** Searches for the file from the location of the Typst file that is currently being compiled. This is the default.\n*   **Absolute Path:** Searches for the file from the *root* of the project. An absolute path always starts with a leading `/`.\n\nHere are examples using an image, assuming `image.png` exists relative to the current file or at the project root respectively:\n\ntyp```\n= Image Showcase\n\n// Relative path: Assumes 'image.png' is in the same directory as this Typst file\n#image(\"../image.png\")\n\n// Absolute path: Assumes 'image.png' is in the 'assets' folder located at the project root\n// For this example to work, the project root needs to be configured correctly \n// and the image needs to be at /assets/image.png relative to that root.\n#image(\"/assets/image.png\")\n\n// You can also specify dimensions for images:\n#image(\"../image.png\", width: 50%)\n```\n\n**Note on Project Root:** By default, the project root is the parent directory of the main Typst file. For security, Typst cannot read files outside this root. If using the CLI, you can set a specific folder as the root with the `--root` flag (e.g., `typst compile --root .. file.typ`). In the web app, the entire project workspace acts as the root."
  },
  {
    "instruction": "Can you explain how set rules and show rules work in Typst's code mode for styling? Give a simple example for each.",
    "answer": "Typst's `set` and `show` rules are powerful mechanisms for applying consistent styling and transformations to your document elements.\n\n*   **`set` Rule:** Modifies the default properties for subsequent elements of a certain type. It's often used to change font size, text color, or page margins globally or within a block.\n*   **`show` Rule:** Transforms or wraps specific elements based on a condition or a function. It allows you to redefine how certain content types (like headings, lists, or raw blocks) are displayed.\n\nHere are simple examples:\n\ntyp```\n= Styling Examples\n\n#set text(font: \"New Computer Modern\", fill: blue)\n// All text below this point will be blue and use the specified font (if available).\n\nThis text is now blue.\n\n#set heading(level: 2, outlined: true)\n// All level-2 headings will now be outlined in the table of contents.\n\n== Section One\n\n#show raw: set text(fill: red, weight: \"bold\")\n// All raw text blocks will now be red and bold.\n\nThis is a normal paragraph.\n\n``[`print(\"Hello world!\")`]``\n// This raw text will appear in red and bold due to the show rule.\n\n#show figure: set block(spacing: 1em)\n// All figures will have 1em spacing below them.\n\n#figure(\n  image(\"../image.png\"),\n  caption: [A sample image.]\n)\n```"
  }
]
```