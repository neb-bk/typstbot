```json
[
  {
    "instruction": "How do I change the default font family for my entire Typst document to 'Latin Modern Roman' and set its base size to 12pt?",
    "answer": "You can set the global font family and size using the `#set text()` rule. This applies the specified properties to all text elements in your document unless overridden locally.\n\ntyp```\n#set text(font: \"Latin Modern Roman\", size: 12pt)\n\nHello, world! This text is in Latin Modern Roman at 12pt.\n```"
  },
  {
    "instruction": "Explain how to apply a specific font weight, like 'bold', to a piece of text without changing its font family or size.",
    "answer": "To apply a specific font weight, you can use the `weight` parameter within the `#text()` function or use shorthand markup like `*text*` for bold. The `#text()` function allows for more granular control over various text properties.\n\ntyp```\n#set text(font: \"New Computer Modern\", size: 11pt)\n\nThis is normal text. #text(weight: \"bold\", \"This text is explicitly bold.\") This is also *bold text* using shorthand.\n\n#set text(weight: \"light\")\nThis text is light by default. #text(weight: \"regular\", \"This one is regular weight.\")\n```"
  },
  {
    "instruction": "Can I make text italic and change its color to blue simultaneously using the `text` function?",
    "answer": "Yes, you can combine multiple text properties like `fill` (color) and `slant` (italic) within a single `#text()` function call. This allows for efficient styling.\n\ntyp```\n#set text(font: \"Roboto\", size: 14pt)\n\nThis is regular text.\n#text(fill: blue, slant: \"italic\", \"This text is both blue and italicized.\")\n\nAnd back to regular text.\n```"
  },
  {
    "instruction": "How do I underline a specific word or phrase in my document?",
    "answer": "You can underline text using the `underline` parameter within the `#text()` function, setting it to `true`. Alternatively, for simpler cases, you can use the `_` shorthand for underlining.\n\ntyp```\n#set text(size: 11pt)\n\nHere is some #text(underline: true, \"important information\") that needs emphasis.\n\nAnother way is to use _this shorthand for underlining_ a phrase.\n```"
  },
  {
    "instruction": "I need to display a quote that is struck through and has a light gray color. How would I achieve this with Typst?",
    "answer": "To achieve struck-through text with a specific color, you can use the `strike` parameter set to `true` and the `fill` parameter for the color within the `#text()` function. Define your color using `luma(percentage)` for grayscale values or named colors.\n\ntyp```\n#set text(size: 10pt)\n\nThis quote is no longer valid:\n#text(strike: true, fill: luma(60%), \"'The quick brown fox jumps over the lazy dog.'\")\n\nIt has been corrected.\n```"
  },
  {
    "instruction": "How can I set the text language to German (`de`) and ensure proper hyphenation rules are applied, specifically for a single paragraph?",
    "answer": "You can set the language using the `lang` parameter of the `#text()` function or `#set text()`. For a single paragraph, wrapping it in `#text()` with the language specified will apply the correct hyphenation and locale-specific rules.\n\ntyp```\n#set text(font: \"New Computer Modern\", size: 11pt)\n\nThis is a standard English paragraph with its own hyphenation rules.\n\n#text(lang: \"de\", \"Der schnelle braune Fuchs springt über den faulen Hund. Donaudampfschifffahrtsgesellschaftskapitän.\")\n\nBack to English.\n```"
  },
  {
    "instruction": "What are `tracking` and `kerning` in Typst's text properties, and how can I adjust them for tighter or looser text?",
    "answer": "`tracking` (letter-spacing) adjusts the space between all characters in a text, making it uniformly looser or tighter. `kerning` adjusts the space between *specific* pairs of characters for better visual balance. You can adjust them using `em` units for relative sizing.\n\ntyp```\n#set text(size: 16pt, font: \"Times New Roman\")\n\nNormal Tracking: VAVAVAVAVA\n\n#text(tracking: 0.1em, \"Loose Tracking: VAVAVAVAVA\")\n\n#text(tracking: -0.05em, \"Tight Tracking: VAVAVAVAVA\")\n\n\n// Kerning is usually handled automatically by fonts but can be disabled/enabled.\n// Typst enables kerning by default if the font provides it.\n// You can explicitly disable it if needed, though rarely desired for typical text.\n// #text(kerning: false, \"AVA\")\n```"
  },
  {
    "instruction": "I want to apply a specific font stretch to text, for example, making it 'condensed'. How do I use the `text` function for this?",
    "answer": "Font stretch adjusts the width of characters in a typeface, ranging from 'ultra-condensed' to 'ultra-expanded'. You can apply this using the `stretch` parameter within `#text()`. Not all fonts support all stretch values.\n\ntyp```\n#set text(font: \"IBM Plex Sans\", size: 12pt)\n\nNormal Text Sample: The quick brown fox jumps over the lazy dog.\n\n#text(stretch: \"condensed\", \"Condensed Text Sample: The quick brown fox jumps over the lazy dog.\")\n\n#text(stretch: \"expanded\", \"Expanded Text Sample: The quick brown fox jumps over the lazy dog.\")\n```"
  },
  {
    "instruction": "Is it possible to render text vertically instead of horizontally using Typst's text functions?",
    "answer": "Yes, you can control the text direction using the `dir` parameter within the `#text()` function. The common values are `ltr` (left-to-right, default), `rtl` (right-to-left), `ttb` (top-to-bottom), and `btt` (bottom-to-top).\n\ntyp```\n#set text(font: \"Noto Sans\", size: 16pt)\n\n#text(dir: ltr, \"Horizontal LTR Text\")\n#text(dir: rtl, \"متن افقی راست به چپ\") // Example for RTL\n\n#block(width: 2em, height: 10em, outline: 0.5pt, inset: 5pt)[ \n  #text(dir: ttb, \"Vertical Text Top-to-Bottom\")\n]\n```"
  },
  {
    "instruction": "How can I apply a decorative overline to a title using the `text` function?",
    "answer": "You can add an overline to text using the `overline` parameter set to `true` within the `#text()` function. This draws a line above the specified text.\n\ntyp```\n#set text(size: 20pt, font: \"Georgia\")\n\n#align(center)[#text(overline: true, \"Chapter Title\")\n]\n\nThis chapter discusses various topics.\n```"
  },
  {
    "instruction": "I want to change the text color to a custom CMYK value, for example, 0% Cyan, 100% Magenta, 100% Yellow, and 0% Black (pure red). How do I specify this using `text`?",
    "answer": "Typst supports various color models, including CMYK, through the `cmyk()` function. You can pass the CMYK color directly to the `fill` parameter of `#text()`.\n\ntyp```\n#set text(size: 14pt)\n\n#text(fill: cmyk(0, 100, 100, 0), \"This text is a vibrant red using CMYK.\")\n\n#text(fill: cmyk(100, 0, 0, 0), \"This text is pure cyan.\")\n```"
  },
  {
    "instruction": "How do I make a short piece of text render in all caps, regardless of its original casing, using the `text` function?",
    "answer": "Typst's `text` function doesn't directly offer a 'transform-to-uppercase' parameter. However, you can use the `upper()` string method in conjunction with the text content to achieve this effect. While not a direct `text` parameter, it's a common pattern to apply text transformations before rendering.\n\ntyp```\n#set text(size: 12pt)\n\n#let original_text = \"This is a mixed case string.\"\n\n#text(original_text.upper())\n\n#text(\"another example\".upper())\n```"
  },
  {
    "instruction": "Can I use the `text` function to control the baseline shift for superscript or subscript text?",
    "answer": "Yes, Typst provides the `baseline` parameter in the `text` function for controlling vertical positioning relative to the baseline. Positive values shift text upwards (superscript-like), and negative values shift it downwards (subscript-like). Typst also has dedicated `super` and `sub` functions which are generally preferred for semantic reasons in mathematics or chemistry.\n\ntyp```\n#set text(size: 12pt)\n\nNormal text. #text(baseline: 0.5em, \"Superscript-like\") text.\n\nNormal text. #text(baseline: -0.3em, \"Subscript-like\") text.\n\n// For proper semantic use, especially in math, prefer `super` and `sub`:\nE = mc#super[2]\nH#sub[2]O\n```"
  },
  {
    "instruction": "How can I apply a dark outline to white text to make it stand out, specifically using text properties?",
    "answer": "While Typst's `text` function primarily focuses on fill color, you can achieve an outlined effect by combining it with a `stroke` property on the `text` element within a `show` rule, or by layering text if `text` did not support it directly. For `text` specifically, it refers to the color of the text itself. To get an outline-like effect, you'd usually use `stroke` on the text. However, the direct `stroke` parameter on `text` defines an *underline* or *overline* stroke color, not a character outline. A common workaround for text outlines is to duplicate text or use path operations, but if we stick strictly to `text` properties that affect character appearance, `stroke` can be misunderstood. Let's provide the most common way which is via `text.stroke` or `stroke` property of `text` which impacts lines *under/over* the text. A true character outline is often done with fonts or SVG effects, not standard text parameters.\n\n*Self-correction*: The question asks about `text` *properties*. `text.stroke` in Typst affects the underline/overline/strike-through stroke. To get a character outline, you'd typically need to use a font feature or draw twice. Since the user asked about `text` function directly, I need to be careful. Typst *does* have a `stroke` argument for `text`, but it applies to the underline/overline, not the character glyph. To achieve a character outline, one typically uses a `transform` or `path` approach or a font that supports outlines. For the purpose of *directly using `text` properties*, the answer should state that a true character outline isn't a direct `text` parameter in the same way `fill` is. However, I can show how `stroke` applies to an underline for example, which is related to `text` styling.\n\nLet's provide a better answer that acknowledges the limitation and gives a workaround or explains the typical use of `stroke` in `text`.\n\n**Revised Answer Strategy:** Acknowledge that `text()`'s `stroke` parameter applies to lines (underline/overline/strike), not character outlines directly. Then, suggest common Typst patterns for character outlines which involve more than just `text()` parameters.\n\n*Self-correction 2*: Typst *does* support `stroke` on text directly for character outlines! My knowledge base was slightly outdated or confused with other layout engines. The `stroke` parameter on `text` can indeed set the outline of the glyphs themselves. This is great!\n\n```typ\n#set text(font: \"Arial Black\", size: 30pt)\n\n#text(fill: white, stroke: (paint: black, thickness: 1.5pt), \"OUTLINED TEXT\")\n\n#text(fill: yellow, stroke: (paint: red, thickness: 0.8pt), \"Hello Typst\")\n```\nThis is the correct and most direct way.\n\n**Final Answer:**\nTo apply an outline (stroke) to the characters of your text, you can use the `stroke` parameter within the `#text()` function. You can specify the `paint` (color) and `thickness` of the stroke. Combining this with a `fill` color allows you to create outlined text.\n\ntyp```\n#set text(font: \"Arial Black\", size: 30pt)\n\n#text(fill: white, stroke: (paint: black, thickness: 1.5pt), \"OUTLINED TEXT EXAMPLE\")\n\n#text(fill: luma(20%), stroke: (paint: aqua, thickness: 1pt), \"Stylized Type\")\n```"
  },
  {
    "instruction": "How do I make text slightly transparent using the `text` function, and can I combine this with a specific color?",
    "answer": "Yes, you can make text transparent by using an `rgba()` color value for the `fill` parameter, where the fourth component `a` represents the alpha (opacity) value, or by using the `luma()` or `rgb()` functions with an optional alpha channel. The alpha value ranges from 0 (fully transparent) to 1 (fully opaque).\n\ntyp```\n#set text(size: 24pt, font: \"Inter\")\n\n#text(fill: black, \"Opaque Text\")\n#text(fill: rgba(0, 0, 0, 0.5), \"50% Transparent Black Text\")\n#text(fill: rgba(255, 0, 0, 0.3), \"30% Transparent Red Text\")\n#text(fill: luma(50%, 0.7), \"70% Opaque Gray Text\")\n```"
  },
  {
    "instruction": "Demonstrate how to change the text font variant (e.g., small caps) for a specific word or phrase.",
    "answer": "To change the font variant, such as to small caps, you can use the `font-variant` parameter within the `#text()` function. Not all fonts support all variants, but many professional fonts do. Common values include `smallcaps`.\n\ntyp```\n#set text(font: \"EB Garamond\", size: 12pt)\n\nThis is regular text. Here is a #text(font-variant: \"smallcaps\", \"heading in small caps\").\n\nThe title of the book is #text(font-variant: \"smallcaps\", \"Pride and Prejudice\").\n```"
  },
  {
    "instruction": "I want to display a symbol or character that is not part of my document's default font. How can I load a specific font for just that character using the `text` function?",
    "answer": "You can load a specific font for a very localized piece of text by providing its name to the `font` parameter of `#text()`. This is useful for symbols, icons, or characters from specialized fonts (like a symbol font) without changing the entire document's font.\n\ntyp```\n#set text(font: \"New Computer Modern\", size: 14pt)\n\n#text(\"This is normal text. Here's a symbol from another font: \") #text(font: \"Noto Color Emoji\", \"✨\")\n\nAnother example using a specific symbol font: #text(font: \"Font Awesome 6 Free\", \"\\u{f004}\") // Unicode for a heart icon (requires Font Awesome installed)\n```"
  },
  {
    "instruction": "Can I apply a custom stroke to an underline created by the `text` function, making it dashed or dotted?",
    "answer": "Yes, when using `underline: true` in the `#text()` function, you can customize the stroke properties of the underline using the `stroke` parameter. This allows you to specify its color, thickness, and even dash pattern using a `dash` array.\n\ntyp```\n#set text(size: 16pt)\n\n#text(underline: true, stroke: (paint: blue, thickness: 1pt, dash: (2pt, 2pt)), \"This text has a dashed blue underline.\")\n\n#text(underline: true, stroke: (paint: red, thickness: 2pt, dash: \"dotted\"), \"This text has a thick dotted red underline.\")\n```"
  },
  {
    "instruction": "How do I ensure that a block of text does not break across lines or pages, effectively making it a 'no-break' block?",
    "answer": "While `text` itself doesn't control line breaking for a block, wrapping the content in a `box` or `raw` block with `breakable: false` is a common Typst pattern to prevent breaking. For a small phrase, Typst typically won't break within a `text()` function call unless forced. For longer content, `box` is more appropriate.\n\n*Self-correction*: The `text` function primarily affects glyph properties. Line breaking is handled by the paragraph composer. For a *block of text*, `box` with `breakable: false` is the right tool. If the instruction implies `text` as in 'text content', then the answer should point to `box`.\n\nTo ensure a block of text does not break across lines or pages, you should typically wrap it in a `box` with the `breakable` parameter set to `false`. While the `text` function itself doesn't directly control line breaks, combining it within an unbreakable box achieves the desired effect for larger chunks of text.\n\ntyp```\n#set text(size: 11pt)\n\nThis is some normal text that can wrap.\n\n#box(breakable: false, [This very long, important, and *unbreakable* phrase should ideally stay on a single line and not be split across multiple lines, even if it causes an overfull line, demonstrating its unbreakable nature.])\n\nMore normal text following the unbreakable block.\n```"
  },
  {
    "instruction": "Show me how to apply a specific font feature, like ligatures, to a piece of text using `text`.",
    "answer": "You can control font features using the `features` parameter in the `#text()` function. Font features are often specified as a dictionary of `key: value` pairs. Common features include `liga` (standard ligatures), `dlig` (discretionary ligatures), `kern` (kerning), etc. Not all fonts support all features.\n\ntyp```\n#set text(font: \"Latin Modern Roman\", size: 16pt)\n\n// Default ligatures (often on by default for fi, fl, etc.):\n\"office flight\"\n\n// Disabling ligatures (if they were on by default or to show difference):\n#text(features: (\"liga\": false), \"office flight\")\n\n// Enabling discretionary ligatures (if supported by font):\n#text(font: \"Fira Code\", features: (\"calt\": true, \"dlig\": true), \"->>> == != ===\") // Example with Fira Code programming ligatures\n```"
  },
  {
    "instruction": "How can I combine a custom fill (color), a specific font, and a precise size for a short title using the `text` function?",
    "answer": "You can combine multiple styling parameters directly within a single `#text()` function call. This is the most straightforward way to apply specific and localized styles.\n\ntyp```\n#text(fill: orange, font: \"serif\", size: 24pt, \"My Awesome Title\")\n\n#text(fill: luma(20%), font: \"sans-serif\", size: 18pt, \"A Subheading\")\n```"
  },
  {
    "instruction": "I need to ensure that the text is rendered with a specific language-variant for a font, such as 'Latin' for 'EB Garamond'. How do I set this using `text`?",
    "answer": "While the `lang` parameter handles general language rules, some fonts have specific `language-variant` features that influence glyph shapes for certain languages (e.g., Serbian Cyrillic vs. Russian Cyrillic). You can specify these using the `font-variant` parameter with a `language-variant` key and a language code.\n\n*Self-correction*: The `language-variant` is a specific sub-key within `font-variant` or directly a `font-variant` property. It's more about glyph forms for specific languages than general `lang` rules. Typst documentation typically lists `language-variant` as a string parameter for `text` (e.g., `text(language-variant: "FRA", "...")`). Let's ensure the example is correct.\n\n```typ\n#set text(font: \"EB Garamond\", size: 12pt)\n\n// No specific language variant, default glyphs:\nThis is normal text. fi fl ff\n\n// Applying a language variant (e.g., for French, which might subtly change some glyphs or ligatures if supported by the font).\n// This is often more about typographic conventions than character sets.\n#text(language-variant: \"FRA\", \"This text uses French language variant typography if available in EB Garamond. fi fl ff\")\n\n// Note: The visual difference might be subtle and depends entirely on the font supporting specific language-variant features.\n// For a more obvious example, consider a font with distinct glyphs for Turkish 'i' or Romanian 's,t' with cedilla/comma-below.\n// Let's use a more illustrative example if possible, but keep it within standard text functions.\n```\n\n**Final Answer:**\nSome fonts include language-specific glyph variants or typographic conventions. You can activate these using the `language-variant` parameter within the `#text()` function. The specific codes (e.g., `\"FRA\"` for French, `\"TRK\"` for Turkish) depend on what the font supports.\n\ntyp```\n#set text(font: \"EB Garamond\", size: 14pt)\n\n// Default rendering\n\"fi fl st\"\n\n// French language-variant (might subtly change ligatures or other forms)\n#text(language-variant: \"FRA\", \"fi fl st\")\n\n// This feature's visible effect depends heavily on the font itself.\n// For instance, a font might have a different 'i' for Turkish or 's' with cedilla for Romanian via this feature.\n// Example (conceptual, depends on font support for 'TRK' language-variant glyphs): \n// #text(font: \"Source Sans Pro\", language-variant: \"TRK\", \"İyi günler.\")\n```"
  },
  {
    "instruction": "I have an image and want to place a caption directly on top of it, with the caption text being white and slightly larger. How would I position this using `text` and other layout elements?",
    "answer": "You can achieve this by overlaying the text on the image. A common way is to use a `stack` or `place` function. The `text` function handles the styling, and `place` handles the positioning over the image. We'll use `place` to position the caption relative to the image.\n\ntyp```\n#set page(width: 80mm, height: auto)\n#set text(font: \"sans-serif\")\n\n#figure(\n  image(\"../image.png\", width: 100%),\n  caption: [A beautiful landscape with a serene lake and mountains.]\n)\n\n#place(bottom, right, dx: -10pt, dy: -10pt, \n  #text(fill: white, size: 14pt, weight: \"bold\", \"Lake View\")\n)\n\n// The image path '../image.png' is used as per your instruction.\n// In a real scenario, ensure '../image.png' exists relative to your Typst file.\n\n#text(size: 10pt, \"This text demonstrates placing a caption over an image using `#place` and styling it with `#text`.\")\n```"
  }
]
```